Dynamic Scope
- Scheme/Python use lexical scope to look up names
  - Lexical scope is also referred to as static scope
- Scope: How names are looked up
- Lexical Scope: parent of a frame is environment where a procedure was defined
- Dynamic Scope: parent of a frame is the environment in which procedure was called
- Project will be able to handle both scopes

(define f (lambda (x) (+ x y)))
(define g (lambda (x y) (f (+ x x))))
- (g 3 7) errors b/c f doesn't have access to y
- mu procedures: special form to create dynamically scoped procedures
  - Parent is where this function is called

Functional Programming
- Functions are all pure functions
- No reassignment and no mutable data types
- Name-value bindings are permanent

Tail Calls
- Goal: make recursion as efficient as while/for loops (iterative approach)
- Tail Call destroys frames that you no longer need
  - Tail calls (the tail context) occur when they're the last thing you do in a "procedure"
  - The point is to be able to only take up a constant amount of space

Python version of factorial

Recursive:
define factorial(n, k):
  if n == 0:
    return k
  else:
    return factorial(n-1, k*n)

Iterative:
define factorial(n, k):
  while n > 0:
    n, k = n-1, k * n
  return k

- Both run in linear time, but the iterative solution takes constant space while the
recursive solution takes up linear space since it opens up new frames to run


Tail calls are a call expression in a tail context
- Tail contexts can be the following:
  - The last body sub-expression in a lambda expression
  - The evaluations in an if expression
  - What gets evaluated in the tail context cond
  - Last subexpression of tail context and/or/begin

(define (factorial n k)
  (if (zero? n) k
    (factorial (- n 1)
      (* k n))))

Tail-call version of finding length of a list
(define (length-tail s)
  (define (length-iter s n)
    (if (null? s) n
    (length-iter (cdr s) (+ 1 n)))
  (length-iter s 0))
)

Reduce-applies procedure to all elements of s starting with start
  - Only a tail call if procedure runs in constant time
(define (reduce procedure s start)
  (if (null? s) start
    (reduce procedure (cdr s) (procedure start (car s)))
  )
)

Map-applies procedure to all elements of s individually
(define (map procedure s)
  (if (null? s) nil
    (cons (procedure (car s)) (map procedure (cdr s)))
  )
)
