Lecture-Streams

- A stream is a list, but the rest of the list is only computed when needed

Regular list: (car (cons 1 nil)) --> 1; (cdr (cons 1 nil)) --> ()
Stream: car (cons-stream 1 nil)) --> 1; (cdr (cons-stream 1 nil)) --> ()

For a stream, errors only occur when expressions are evaluated
(cons 1 (cons (/ 1 0) nil)) --> Gives an error when it tries to evaluate (/ 1 0)
(cons-stream 1 (cons-stream (/ 1 0) nil)) --> (1 .#[promise (not forced)])
  - Promise: scheme way of representing a value that can be evaluated upon demand

(car (cons-stream 1 (cons-stream (/ 1 0) nil))) --> 1
(cdr (cons-stream 1 (cons-stream (/ 1 0) nil))) --> Error
  - We receive an error when it tries to evaluate the second component (in cdr)

(define s (cons-stream 1 (cons-stream 2 nil)))
(car s) --> 1
(car (cdr-stream s)) --> 2
(cdr-stream (cdr-stream s)) --> ()
- In this sense, streams behave similarly to regularly Scheme lists
- Stream ranges are implicit: only evaluate elements when demanded
- Stream properties allow it to be infinitely long
  - We only need to define the behavior of the stream for how it will be computed

; Creating an integer stream in Scheme
(define (int-stream start)
  (cons-stream start (int-stream (+ start 1)))
)

(define ints (int-stream 3)) --> ints
(car ints) --> 3
(car (cdr-stream ints)) --> 4
(car (cdr-stream (cdr-stream ints))) --> 5

(define (prefix s k)
  (if (= k 0) ()
    (cons (car ints) (prefix (cdr-stream s) (- k 1)))
  )
)

Stream Processing
; Doesn't actually give us infinite values due to delayed processing
(define (square-stream s)
  (cons-stream ((* (car s) (car s)) (square-stream (cdr-stream s))))
)

(define ints (int-stream 3))
(square-stream ints) --> (9 . #[delayed])
(cdr-stream (square-stream ints)) --> (16 . #[delayed])
  - cdr-stream can compute any arbitrary element
  - Meanwhile, iter can only compute the next one

(define ones (cons-stream 1 ones)) --> constant stream of 1's

; Combining 2 streams by separating each into car and cdr
(define (add-streams s t)
  (cons-stream (+ (car s) (car t))
  (add-streams (cdr s) (cdr t)))
)

; Using recursive calls to streams to get a stream of integers
(define ints (cons-stream 1 (add-streams ones ints)))

; ones --> (1 1 1 1 1 ....)
(car ints) = 1, (car ones) = 1 --> 2
(car ints) = 2, (car ones) = 1 --> 3
(car ints) = 3, (car ones) = 1 --> 4
- The stream ints mutates recursively

To generate a stream of primes...
- Look at all the integers starting at 2
  - Filter out any numbers that are multiples of this prime
- Find the next prime
  - Filter out its multiples
    - Repeat recursively

Task: generate an infinite stream of prime numbers
(def (sieve s)
  (cons-stream (car s)
  (sieve
    (filter-stream
      (lambda (x) not (= 0 (remainder x (car s)))) (cdr-stream s)))
  )
)

(define primes (sieve (int-stream 2)))
primes --> (2 . #[delayed])
(prefix primes 10) --> yields a list of the first 10 prime numbers
- All the prime numbers, starting with 2 (in theory)
